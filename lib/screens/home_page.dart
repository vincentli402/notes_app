import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/material.dart';
import 'package:notesbook_app/screens/login_screen.dart';
import 'package:cloud_firestore/cloud_firestore.dart';

// Note model
class Note {
  String id; // Document ID for Firestore
  String title;
  String content;
  String category;
  DateTime date;

  Note({
    required this.id,
    required this.title,
    required this.content,
    required this.category,
    required this.date,
  });

  // Factory method to create a Note from Firestore Document
  factory Note.fromFirestore(DocumentSnapshot doc) {
    final data = doc.data() as Map<String, dynamic>;
    return Note(
      id: doc.id,
      title: data['title'],
      content: data['content'],
      category: data['category'],
      date: (data['date'] as Timestamp).toDate(),
    );
  }

  // Method to convert Note to Map for Firestore
  Map<String, dynamic> toMap() {
    return {
      'title': title,
      'content': content,
      'category': category,
      'date': Timestamp.fromDate(date),
    };
  }
}

class HomePage extends StatefulWidget {
  const HomePage({super.key});

  @override
  State<HomePage> createState() => _HomePageState();
}

class _HomePageState extends State<HomePage> {
  final List<Note> notes = []; // List to store notes
  final TextEditingController titleController = TextEditingController();
  final TextEditingController contentController = TextEditingController();
  String selectedCategory = 'Personal'; // Default category
  String selectedTab = 'All'; // Default category tab

  // Method to add a new note to the list
  Future<void> addNote() async {
    if (titleController.text.isEmpty) {
      // Display a message or SnackBar to the user
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('Please enter a title!')),
      );
      return; // If title is empty, don't add the note
    }
    final newNote = Note(
      id: '', // ID will be generated by Firestore
      title: titleController.text,
      content: contentController.text,
      category: selectedCategory,
      date: DateTime.now(),
    );

    // Save the note to Firestore
    try {
      DocumentReference docRef = await FirebaseFirestore.instance
          .collection('users')
          .doc(FirebaseAuth.instance.currentUser?.uid)
          .collection('notes')
          .add(newNote.toMap());

      // Update the ID of the new note
      newNote.id = docRef.id;
      setState(() {
        notes.add(newNote);
      });
      titleController.clear();
      contentController.clear();

      // Show snackbar
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('${newNote.category} card "${newNote.title}" added!'),
          duration: const Duration(seconds: 1),
        ),
      );
    } catch (e) {
      // Handle Firestore errors
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Failed to add note: $e')),
      );
    }
  }

  Future<void> fetchNotes() async {
    final user = FirebaseAuth.instance.currentUser;
    if (user == null) return; // Return if user is not logged in

    final snapshot = await FirebaseFirestore.instance
        .collection('users')
        .doc(user.uid)
        .collection('notes')
        .get();

    setState(() {
      notes.clear();
      notes.addAll(snapshot.docs.map((doc) => Note.fromFirestore(doc)));
    });
  }

  @override
  void initState() {
    super.initState();
    fetchNotes(); // Fetch notes when the widget is initialized
  }

  // Method to delete a note by id. Takes in string instead because id is a string in the database.
  void deleteNote(String id) async {
    final user = FirebaseAuth.instance.currentUser;
    if (user == null) return; // Return if user is not logged in

    int actualIndex = notes.indexWhere((note) => note.id == id);
    final noteToDelete = notes[actualIndex];

    // Remove from Firestore
    await FirebaseFirestore.instance
        .collection('users')
        .doc(user.uid)
        .collection('notes')
        .doc(noteToDelete.id)
        .delete();

    // Remove from local list
    setState(() {
      notes.removeAt(actualIndex);
    });

    // Show snackbar
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(
            '${noteToDelete.category} card "${noteToDelete.title}" deleted!'),
        duration: const Duration(seconds: 1),
      ),
    );
  }

  // Method to edit a note
  void editNoteDialog(BuildContext context, Note note) {
    titleController.text = note.title;
    contentController.text = note.content;
    selectedCategory = note.category;

    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(20),
          ),
          content: StatefulBuilder(
            builder: (BuildContext context, StateSetter setState) {
              return SizedBox(
                width: MediaQuery.of(context).size.width * 0.65,
                child: SingleChildScrollView(
                  child: Column(
                    mainAxisSize: MainAxisSize.min,
                    children: [
                      TextField(
                        controller: titleController,
                        decoration: const InputDecoration(
                          labelText: 'Title',
                          border: OutlineInputBorder(),
                        ),
                      ),
                      const SizedBox(height: 8),
                      TextField(
                        controller: contentController,
                        decoration: const InputDecoration(
                          labelText: 'Content',
                          border: OutlineInputBorder(),
                        ),
                        maxLines: 3,
                      ),
                      const SizedBox(height: 8),
                      DropdownButton<String>(
                        value: selectedCategory,
                        items: const [
                          DropdownMenuItem(
                              value: 'Personal', child: Text('Personal')),
                          DropdownMenuItem(
                              value: 'Business', child: Text('Business')),
                        ],
                        onChanged: (value) {
                          setState(() {
                            selectedCategory = value!;
                          });
                        },
                      ),
                      ElevatedButton(
                        onPressed: () async {
                          // Update the existing note
                          final noteToUpdate = note;
                          noteToUpdate.title = titleController.text;
                          noteToUpdate.content = contentController.text;
                          noteToUpdate.category = selectedCategory;

                          // Update Firestore
                          await FirebaseFirestore.instance
                              .collection('users')
                              .doc(FirebaseAuth.instance.currentUser?.uid)
                              .collection('notes')
                              .doc(noteToUpdate.id)
                              .update(noteToUpdate.toMap());

                          // Show snackbar
                          ScaffoldMessenger.of(context).showSnackBar(
                            SnackBar(
                              content: Text(
                                  '${noteToUpdate.category} card "${noteToUpdate.title}" updated!'),
                              duration: const Duration(seconds: 1),
                            ),
                          );

                          // Call setState at the higher level to ensure the UI updates
                          this.setState(() {});
                          Navigator.pop(context);
                        },
                        style: ElevatedButton.styleFrom(
                          backgroundColor: const Color(0xFF8E91E4),
                          shape: RoundedRectangleBorder(
                            borderRadius: BorderRadius.circular(20),
                          ),
                        ),
                        child: const Text('Update Note'),
                      ),
                    ],
                  ),
                ),
              );
            },
          ),
        );
      },
    );
  }

  // Filter notes based on selected tab
  List<Note> get filteredNotes {
    if (selectedTab == 'All') {
      return notes;
    } else {
      return notes.where((note) => note.category == selectedTab).toList();
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: const Color.fromARGB(255, 255, 230, 201),
      appBar: AppBar(
        backgroundColor: const Color.fromARGB(255, 255, 230, 201),
        title: null,
        toolbarHeight: 150,
        flexibleSpace: Container(
          padding: const EdgeInsets.only(left: 64, top: 32),
          child: const Align(
            alignment: Alignment.topLeft,
            child: Text(
              'Notes',
              style: TextStyle(
                fontSize: 64,
                fontWeight: FontWeight.bold,
              ),
            ),
          ),
        ),
        actions: [
          Padding(
            padding: const EdgeInsets.all(32.0),
            child: IconButton(
              icon: const Icon(Icons.logout),
              tooltip: 'Logout',
              iconSize: 64,
              onPressed: () async {
                await FirebaseAuth.instance.signOut();

                // Display a message or SnackBar to the user
                ScaffoldMessenger.of(context).showSnackBar(
                  const SnackBar(
                      content: Text('Logged out!'),
                      duration: Duration(seconds: 1)),
                );

                Navigator.of(context).pushReplacement(
                  MaterialPageRoute(builder: (context) => const LoginScreen()),
                );
              },
            ),
          ),
        ],
      ),
      body: Column(
        children: [
          // Category Tabs and "Add" Button in a Row
          Padding(
            padding: const EdgeInsets.only(right: 64, left: 32, bottom: 16),
            child: Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                Flexible(
                  child: Row(
                    mainAxisAlignment: MainAxisAlignment.start,
                    children: [
                      const Spacer(
                        flex: 1,
                      ),
                      Flexible(
                        flex: 25,
                        child: _buildCategoryButton('All'),
                      ),
                      Flexible(
                        flex: 25,
                        child: _buildCategoryButton('Personal'),
                      ),
                      Flexible(
                        flex: 25,
                        child: _buildCategoryButton('Business'),
                      ),
                    ],
                  ),
                ),
                ElevatedButton.icon(
                  onPressed: () {
                    _showAddNoteDialog(context);
                  },
                  icon: const Icon(
                    Icons.add_card,
                    size: 48,
                  ),
                  label: const Text(
                    '  Add',
                    style: TextStyle(
                        fontSize: 42,
                        color: Colors.black,
                        fontWeight: FontWeight.bold),
                  ),
                  style: ElevatedButton.styleFrom(
                    padding: const EdgeInsets.only(
                        left: 32, right: 32, top: 12, bottom: 12),
                    backgroundColor: const Color(0xFF8E91E4),
                    iconColor: Colors.black,
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(20),
                    ),
                  ),
                ),
              ],
            ),
          ),
          // Display notes
          Expanded(
            child: Padding(
              padding: const EdgeInsets.symmetric(vertical: 8, horizontal: 64),
              child: GridView.builder(
                gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
                  crossAxisCount: 3,
                  crossAxisSpacing: 32,
                  mainAxisSpacing: 32,
                  childAspectRatio: 3 / 2,
                ),
                itemCount: filteredNotes.length,
                itemBuilder: (context, index) {
                  return _buildNoteCard(filteredNotes, index);
                },
              ),
            ),
          ),
        ],
      ),
    );
  }

  // Build Category Button
  Widget _buildCategoryButton(String category) {
    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 8),
      child: ElevatedButton(
        style: ElevatedButton.styleFrom(
          backgroundColor: selectedTab == category
              ? const Color(0xFF353535)
              : const Color(0xFFE0D4C7),
          shape: const RoundedRectangleBorder(
            borderRadius: BorderRadius.only(
                topLeft: Radius.circular(20), topRight: Radius.circular(20)),
          ),
        ),
        onPressed: () {
          setState(() {
            selectedCategory = category == "Personal" || category == "Business"
                ? category
                : "Personal";
            selectedTab = category;
          });
        },
        child: Padding(
          padding: const EdgeInsets.all(12.0),
          child: Text(
            category,
            style: TextStyle(
              fontSize: 28,
              fontWeight: FontWeight.bold,
              color: selectedTab == category
                  ? Colors.white
                  : const Color(0xFF353535),
            ),
          ),
        ),
      ),
    );
  }

  // Build Note Card
  Widget _buildNoteCard(List<Note> filteredNotes, int index) {
    final note = filteredNotes[index];

    return LayoutBuilder(builder: (context, constraints) {
      return Card(
        color: Colors.white,
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(24),
        ),
        elevation: 8,
        child: Padding(
          padding: const EdgeInsets.all(32), // Padding for the card
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            mainAxisSize:
                MainAxisSize.min, // Make sure the card wraps the content
            children: [
              const SizedBox(height: 8),

              Row(
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: [
                  Flexible(
                    child: Row(
                      children: [
                        // Category tag
                        Container(
                          padding: const EdgeInsets.symmetric(
                              horizontal: 16, vertical: 8),
                          decoration: BoxDecoration(
                            color: note.category == 'Personal'
                                ? const Color(0xFF8E91E4)
                                : const Color(0xFF7EE8A9),
                            borderRadius: BorderRadius.circular(20),
                          ),
                          child: Text(
                            note.category,
                            style: TextStyle(
                              color: Colors.white,
                              fontWeight: FontWeight.bold,
                              fontSize: constraints.maxWidth * .05,
                            ),
                          ),
                        ),

                        const Spacer(),

                        // Actions
                        IconButton(
                          onPressed: () {
                            editNoteDialog(context, note); // Open edit dialog
                          },
                          icon: const Icon(Icons.edit, size: 18),
                        ),
                        IconButton(
                          onPressed: () {
                            deleteNote(note.id);
                          },
                          icon: const Icon(Icons.delete, size: 18),
                        ),
                      ],
                    ),
                  ),
                ],
              ),

              const SizedBox(height: 8),

              // Note Title
              Text(
                note.title,
                style: TextStyle(
                  fontWeight: FontWeight.bold,
                  fontSize: constraints.maxWidth * .08,
                ),
              ),
              const SizedBox(height: 8),

              // Note Content with scrolling
              Expanded(
                child: ConstrainedBox(
                  constraints: const BoxConstraints(
                    minWidth: double.infinity,
                  ),
                  child: SingleChildScrollView(
                    child: SelectableText(
                      note.content,
                      style: TextStyle(
                          fontSize: constraints.maxWidth * .035,
                          overflow: TextOverflow.fade),
                    ),
                  ),
                ),
              ),

              const SizedBox(height: 16),
              // Note Date
              Row(
                children: [
                  const Spacer(),
                  Text(
                    '${note.date.month}/${note.date.day}/${note.date.year}',
                    style: TextStyle(
                        fontSize: constraints.maxWidth * .03,
                        color: Colors.black54),
                    overflow: TextOverflow.fade,
                  ),
                ],
              ),
            ],
          ),
        ),
      );
    });
  }

// Show Add Note Dialog
  void _showAddNoteDialog(BuildContext context) {
    titleController.clear();
    contentController.clear();

    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(20),
          ),
          content: StatefulBuilder(
            builder: (BuildContext context, StateSetter setState) {
              return SizedBox(
                width: MediaQuery.of(context).size.width * 0.65, // Dialog width
                child: SingleChildScrollView(
                  child: Column(
                    mainAxisSize: MainAxisSize.min,
                    children: [
                      TextField(
                        controller: titleController,
                        decoration: const InputDecoration(
                          labelText: 'Title',
                          border: OutlineInputBorder(),
                        ),
                      ),
                      const SizedBox(height: 8),
                      TextField(
                        controller: contentController,
                        decoration: const InputDecoration(
                          labelText: 'Content',
                          border: OutlineInputBorder(),
                        ),
                        maxLines: 3,
                      ),
                      const SizedBox(height: 8),
                      DropdownButton<String>(
                        value: selectedCategory,
                        items: const [
                          DropdownMenuItem(
                              value: 'Personal', child: Text('Personal')),
                          DropdownMenuItem(
                              value: 'Business', child: Text('Business')),
                        ],
                        onChanged: (value) {
                          setState(() {
                            selectedCategory = value!;
                          });
                        },
                      ),
                      ElevatedButton(
                        onPressed: () async {
                          await addNote(); // Added await keyword here
                          Navigator.pop(context);
                        },
                        style: ElevatedButton.styleFrom(
                          backgroundColor: const Color(0xFF8E91E4),
                          shape: RoundedRectangleBorder(
                            borderRadius: BorderRadius.circular(20),
                          ),
                        ),
                        child: const Text('Add Note'),
                      ),
                    ],
                  ),
                ),
              );
            },
          ),
        );
      },
    );
  }
}
